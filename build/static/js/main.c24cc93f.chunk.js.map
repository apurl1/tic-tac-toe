{"version":3,"sources":["Square.js","Board.js","Game.js","App.js","index.js"],"names":["Square","props","className","onClick","value","Board","row","col","board","cellCounter","i","columns","j","push","this","renderSquare","key","squares","createBoard","React","Component","Game","newRound","winner","title","isRoomCreator","gameOver","Swal","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","pubnub","publish","message","reset","channel","gameChannel","endGame","announceWinner","pieces","state","xScore","oScore","setState","checkForWinner","possibleCombinations","length","a","b","c","counter","publishMove","index","piece","whosTurn","onMakeMove","Array","fill","myTurn","getMessage","msg","close","status","App","onPressCreate","e","roomId","shortid","generate","substring","lobbyChannel","subscribe","channels","withPresence","padding","isDisabled","onPressJoin","input","inputPlaceholder","joinRoom","hereNow","response","totalOccupancy","notRoomCreator","catch","error","console","log","isPlaying","unsubscribe","PubNubReact","publishKey","subscribeKey","init","disabled","xUsername","oUsername","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c24cc93f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = props => ( \n  <button className={`square`} onClick={props.onClick}>\n    {props.value}\n  </button>\n);\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  // Create the 3 x 3 board\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";  \n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(''), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn\n    };\n\n    this.turn = 'X';\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount(){\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // Publish move to the opponent's board\n      if(msg.message.turn === this.props.piece){\n        this.publishMove(msg.message.index, msg.message.piece);\n      }\n\n      // Start a new round\n      else if(msg.message.reset){\n        this.setState({\n          squares: Array(9).fill(''),\n          whosTurn : this.props.myTurn\n        });\n\n        this.turn = 'X';\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close()\n      }\n\n      // End the game and go back to the lobby\n      else if(msg.message.endGame){\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  newRound = (winner) => {\n    let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if((this.props.isRoomCreator === false) && this.gameOver){\n      Swal.fire({  \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Waiting for a new round...',\n        confirmButtonColor: 'rgb(208,33,41)',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n        } ,\n      });\n      this.turn = 'X'; // Set turn to X so Player O can't make a move \n    } \n\n    // Show this to the room creator\n    else if(this.props.isRoomCreator && this.gameOver){\n      Swal.fire({      \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Continue Playing?',\n        showCancelButton: true,\n        confirmButtonColor: 'rgb(208,33,41)',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Nope',\n        confirmButtonText: 'Yea!',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n            cancelButton: 'button-class'\n        } ,\n      }).then((result) => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n\n        else{\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      })      \n    }\n   }\n\n\t// Update score for the winner\n  announceWinner = (winner) => {\n\t\tlet pieces = {\n\t\t\t'X': this.state.xScore,\n\t\t\t'O': this.state.oScore\n\t\t}\n\t\n\t\tif(winner === 'X'){\n\t\t\tpieces['X'] += 1;\n\t\t\tthis.setState({\n\t\t\t\txScore: pieces['X']\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tpieces['O'] += 1;\n\t\t\tthis.setState({\n\t\t\t\toScore: pieces['O']\n\t\t\t});\n\t\t}\n\t\t// End the game once there is a winner\n\t\tthis.gameOver = true;\n\t\tthis.newRound(winner);\t\n  }\n  \n  checkForWinner = (squares) => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n  \n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if(this.counter === 9){\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n   \n  // Opponent's move is published to the board\n  publishMove = (index, piece) => {\n    const squares = this.state.squares;\n\n    squares[index] = piece;\n    this.turn = (squares[index] === 'X')? 'O' : 'X';\n\n    this.setState({\n      squares: squares,\n      whosTurn: !this.state.whosTurn\n    });\n\n    this.checkForWinner(squares)\n  }\n\n  onMakeMove = (index) =>{\n    const squares = this.state.squares;\n\n    // Check if the square is empty and if it's the player's turn to make a move\n    if(!squares[index] && (this.turn === this.props.piece)){ \n      squares[index] = this.props.piece;\n\n      this.setState({\n        squares: squares,\n        whosTurn: !this.state.whosTurn\n      });\n  \n      // Other player's turn to make a move\n      this.turn = (this.turn === 'X') ? 'O' : 'X';\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          index: index,\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });  \n\n      // Check if there is a winner\n      this.checkForWinner(squares)\n    }\n  }\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board\n              squares={this.state.squares}\n              onClick={index => this.onMakeMove(index)}\n            />  \n            <p className=\"status-info\">{status}</p>        \n        </div>\n        \n        <div className=\"scores-container\">\n          <div>\n            <p>Player X: {this.state.xScore} </p>\n          </div>\n\n          <div>\n            <p>Player O: {this.state.oScore} </p>\n          </div>\n        </div>   \n      </div>\n    );\n  }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport Game from './Game';\nimport Board from './Board';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";  \nimport shortid  from 'shortid';\nimport './Game.css';\n \nclass App extends Component {\n  constructor(props) {  \n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-4b231eda-618f-4ef1-bdcd-bccfe45c94c5\", \n      subscribeKey: \"sub-c-31a1c966-be52-11ea-bcf8-42a3de10f872\"    \n    });\n    \n    this.state = {\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    };\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;    \n    this.pubnub.init(this);\n  }  \n  \n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if(this.lobbyChannel != null){\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        // Start the game once an opponent joins the channel\n        if(msg.message.notRoomCreator){\n          // Create a different channel for the game\n          this.gameChannel = 'tictactoegame--' + this.roomId;\n\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n\n          this.setState({\n            isPlaying: true\n          });  \n\n          // Close the modals if they are opened\n          Swal.close();\n        }\n      }); \n    }\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0,5);\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n  // Open the modal\n  Swal.fire({\n    position: 'top',\n    allowOutsideClick: false,\n    title: 'Share this room ID with your friend',\n    text: this.roomId,\n    width: 275,\n    padding: '0.7em',\n    // Custom CSS\n    customClass: {\n        heightAuto: false,\n        title: 'title-class',\n        popup: 'popup-class',\n        confirmButton: 'button-class'\n    }\n  })\n\n    this.setState({\n      piece: 'X',\n      isRoomCreator: true,\n      isDisabled: true, // Disable the 'Create' button\n      myTurn: true, // Room creator makes the 1st move\n    });   \n  }\n  \n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class ',\n        cancelButton: 'join-button-class'\n      } \n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if(result.value){\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    // Check the number of people in the channel\n    this.pubnub.hereNow({\n      channels: [this.lobbyChannel], \n    }).then((response) => { \n        if(response.totalOccupancy < 2){\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          \n          this.setState({\n            piece: 'O',\n          });  \n          \n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true,\n            },\n            channel: this.lobbyChannel\n          });\n        } \n        else{\n          // Game in progress\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Error',\n            text: 'Game in progress. Try another room.',\n            width: 275,\n            padding: '0.7em',\n            customClass: {\n                heightAuto: false,\n                title: 'title-class',\n                popup: 'popup-class',\n                confirmButton: 'button-class'\n            }\n          })\n        }\n    }).catch((error) => { \n      console.log(error);\n    });\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.setState({\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    });\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;  \n\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  render() {  \n    return (  \n        <div> \n          <div className=\"title\">\n            <p>React Tic Tac Toe</p>\n          </div>\n\n          {\n            !this.state.isPlaying &&\n            <div className=\"game\">\n              <div className=\"board\">\n                <Board\n                    squares={0}\n                    onClick={index => null}\n                  />  \n                  \n                <div className=\"button-container\">\n                  <button \n                    className=\"create-button \"\n                    disabled={this.state.isDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                    > Create \n                  </button>\n                  <button \n                    className=\"join-button\"\n                    onClick={(e) => this.onPressJoin()}\n                    > Join \n                  </button>\n                </div>                        \n          \n              </div>\n            </div>\n          }\n\n          {\n            this.state.isPlaying &&\n            <Game \n              pubnub={this.pubnub}\n              gameChannel={this.gameChannel} \n              piece={this.state.piece}\n              isRoomCreator={this.state.isRoomCreator}\n              myTurn={this.state.myTurn}\n              xUsername={this.state.xUsername}\n              oUsername={this.state.oUsername}\n              endGame={this.endGame}\n            />\n          }\n        </div>\n    );  \n  } \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}